// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_POINTCLOUDMEASUREMENT_RHMSG_H_
#define FLATBUFFERS_GENERATED_POINTCLOUDMEASUREMENT_RHMSG_H_

#include "flatbuffers/flatbuffers.h"

#include "header_generated.h"

namespace RHMsg {

struct PointCloudPoint;

struct PointCloudMeasurement;

MANUALLY_ALIGNED_STRUCT(4) PointCloudPoint FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;
  float intensity_;

 public:
  PointCloudPoint() {
    memset(this, 0, sizeof(PointCloudPoint));
  }
  PointCloudPoint(const PointCloudPoint &_o) {
    memcpy(this, &_o, sizeof(PointCloudPoint));
  }
  PointCloudPoint(float _x, float _y, float _z, float _intensity)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)),
        intensity_(flatbuffers::EndianScalar(_intensity)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return flatbuffers::EndianScalar(z_);
  }
  float intensity() const {
    return flatbuffers::EndianScalar(intensity_);
  }
};
STRUCT_END(PointCloudPoint, 16);

struct PointCloudMeasurement FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_HEADER = 4,
    VT_POINTS = 6
  };
  const HeaderData *header() const {
    return GetPointer<const HeaderData *>(VT_HEADER);
  }
  const flatbuffers::Vector<const PointCloudPoint *> *points() const {
    return GetPointer<const flatbuffers::Vector<const PointCloudPoint *> *>(VT_POINTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HEADER) &&
           verifier.VerifyTable(header()) &&
           VerifyOffset(verifier, VT_POINTS) &&
           verifier.Verify(points()) &&
           verifier.EndTable();
  }
};

struct PointCloudMeasurementBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_header(flatbuffers::Offset<HeaderData> header) {
    fbb_.AddOffset(PointCloudMeasurement::VT_HEADER, header);
  }
  void add_points(flatbuffers::Offset<flatbuffers::Vector<const PointCloudPoint *>> points) {
    fbb_.AddOffset(PointCloudMeasurement::VT_POINTS, points);
  }
  PointCloudMeasurementBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PointCloudMeasurementBuilder &operator=(const PointCloudMeasurementBuilder &);
  flatbuffers::Offset<PointCloudMeasurement> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PointCloudMeasurement>(end);
    return o;
  }
};

inline flatbuffers::Offset<PointCloudMeasurement> CreatePointCloudMeasurement(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<HeaderData> header = 0,
    flatbuffers::Offset<flatbuffers::Vector<const PointCloudPoint *>> points = 0) {
  PointCloudMeasurementBuilder builder_(_fbb);
  builder_.add_points(points);
  builder_.add_header(header);
  return builder_.Finish();
}

inline flatbuffers::Offset<PointCloudMeasurement> CreatePointCloudMeasurementDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<HeaderData> header = 0,
    const std::vector<const PointCloudPoint *> *points = nullptr) {
  return RHMsg::CreatePointCloudMeasurement(
      _fbb,
      header,
      points ? _fbb.CreateVector<const PointCloudPoint *>(*points) : 0);
}

inline const RHMsg::PointCloudMeasurement *GetPointCloudMeasurement(const void *buf) {
  return flatbuffers::GetRoot<RHMsg::PointCloudMeasurement>(buf);
}

inline bool VerifyPointCloudMeasurementBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<RHMsg::PointCloudMeasurement>(nullptr);
}

inline void FinishPointCloudMeasurementBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<RHMsg::PointCloudMeasurement> root) {
  fbb.Finish(root);
}

}  // namespace RHMsg

#endif  // FLATBUFFERS_GENERATED_POINTCLOUDMEASUREMENT_RHMSG_H_
