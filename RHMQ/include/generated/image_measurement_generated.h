// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_IMAGEMEASUREMENT_RHMSG_H_
#define FLATBUFFERS_GENERATED_IMAGEMEASUREMENT_RHMSG_H_

#include "flatbuffers/flatbuffers.h"

#include "header_generated.h"

namespace RHMsg {

struct ImageMeasurement;

enum ImageEncoding {
  ImageEncoding_MONO8 = 0,
  ImageEncoding_BAYER_RGGB8 = 1,
  ImageEncoding_RGB8 = 2,
  ImageEncoding_MIN = ImageEncoding_MONO8,
  ImageEncoding_MAX = ImageEncoding_RGB8
};

inline ImageEncoding (&EnumValuesImageEncoding())[3] {
  static ImageEncoding values[] = {
    ImageEncoding_MONO8,
    ImageEncoding_BAYER_RGGB8,
    ImageEncoding_RGB8
  };
  return values;
}

inline const char **EnumNamesImageEncoding() {
  static const char *names[] = {
    "MONO8",
    "BAYER_RGGB8",
    "RGB8",
    nullptr
  };
  return names;
}

inline const char *EnumNameImageEncoding(ImageEncoding e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesImageEncoding()[index];
}

struct ImageMeasurement FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_HEADER = 4,
    VT_VALUES = 6,
    VT_ENCODING = 8,
    VT_WIDTH = 10,
    VT_HEIGHT = 12
  };
  const HeaderData *header() const {
    return GetPointer<const HeaderData *>(VT_HEADER);
  }
  const flatbuffers::Vector<uint8_t> *values() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_VALUES);
  }
  ImageEncoding encoding() const {
    return static_cast<ImageEncoding>(GetField<int8_t>(VT_ENCODING, 0));
  }
  int32_t width() const {
    return GetField<int32_t>(VT_WIDTH, 0);
  }
  int32_t height() const {
    return GetField<int32_t>(VT_HEIGHT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HEADER) &&
           verifier.VerifyTable(header()) &&
           VerifyOffset(verifier, VT_VALUES) &&
           verifier.Verify(values()) &&
           VerifyField<int8_t>(verifier, VT_ENCODING) &&
           VerifyField<int32_t>(verifier, VT_WIDTH) &&
           VerifyField<int32_t>(verifier, VT_HEIGHT) &&
           verifier.EndTable();
  }
};

struct ImageMeasurementBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_header(flatbuffers::Offset<HeaderData> header) {
    fbb_.AddOffset(ImageMeasurement::VT_HEADER, header);
  }
  void add_values(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> values) {
    fbb_.AddOffset(ImageMeasurement::VT_VALUES, values);
  }
  void add_encoding(ImageEncoding encoding) {
    fbb_.AddElement<int8_t>(ImageMeasurement::VT_ENCODING, static_cast<int8_t>(encoding), 0);
  }
  void add_width(int32_t width) {
    fbb_.AddElement<int32_t>(ImageMeasurement::VT_WIDTH, width, 0);
  }
  void add_height(int32_t height) {
    fbb_.AddElement<int32_t>(ImageMeasurement::VT_HEIGHT, height, 0);
  }
  ImageMeasurementBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ImageMeasurementBuilder &operator=(const ImageMeasurementBuilder &);
  flatbuffers::Offset<ImageMeasurement> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ImageMeasurement>(end);
    return o;
  }
};

inline flatbuffers::Offset<ImageMeasurement> CreateImageMeasurement(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<HeaderData> header = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> values = 0,
    ImageEncoding encoding = ImageEncoding_MONO8,
    int32_t width = 0,
    int32_t height = 0) {
  ImageMeasurementBuilder builder_(_fbb);
  builder_.add_height(height);
  builder_.add_width(width);
  builder_.add_values(values);
  builder_.add_header(header);
  builder_.add_encoding(encoding);
  return builder_.Finish();
}

inline flatbuffers::Offset<ImageMeasurement> CreateImageMeasurementDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<HeaderData> header = 0,
    const std::vector<uint8_t> *values = nullptr,
    ImageEncoding encoding = ImageEncoding_MONO8,
    int32_t width = 0,
    int32_t height = 0) {
  return RHMsg::CreateImageMeasurement(
      _fbb,
      header,
      values ? _fbb.CreateVector<uint8_t>(*values) : 0,
      encoding,
      width,
      height);
}

inline const RHMsg::ImageMeasurement *GetImageMeasurement(const void *buf) {
  return flatbuffers::GetRoot<RHMsg::ImageMeasurement>(buf);
}

inline bool VerifyImageMeasurementBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<RHMsg::ImageMeasurement>(nullptr);
}

inline void FinishImageMeasurementBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<RHMsg::ImageMeasurement> root) {
  fbb.Finish(root);
}

}  // namespace RHMsg

#endif  // FLATBUFFERS_GENERATED_IMAGEMEASUREMENT_RHMSG_H_
