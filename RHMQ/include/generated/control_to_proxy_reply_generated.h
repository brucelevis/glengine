// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CONTROLTOPROXYREPLY_RHMSG_H_
#define FLATBUFFERS_GENERATED_CONTROLTOPROXYREPLY_RHMSG_H_

#include "flatbuffers/flatbuffers.h"

namespace RHMsg {

struct ControlToProxyReply;

enum ControlToProxyReplyType {
  ControlToProxyReplyType_DONE = 0,
  ControlToProxyReplyType_UNUPDATED_NPC_STATUS_REPLY = 1,
  ControlToProxyReplyType_MIN = ControlToProxyReplyType_DONE,
  ControlToProxyReplyType_MAX = ControlToProxyReplyType_UNUPDATED_NPC_STATUS_REPLY
};

inline ControlToProxyReplyType (&EnumValuesControlToProxyReplyType())[2] {
  static ControlToProxyReplyType values[] = {
    ControlToProxyReplyType_DONE,
    ControlToProxyReplyType_UNUPDATED_NPC_STATUS_REPLY
  };
  return values;
}

inline const char **EnumNamesControlToProxyReplyType() {
  static const char *names[] = {
    "DONE",
    "UNUPDATED_NPC_STATUS_REPLY",
    nullptr
  };
  return names;
}

inline const char *EnumNameControlToProxyReplyType(ControlToProxyReplyType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesControlToProxyReplyType()[index];
}

struct ControlToProxyReply FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_REPLY = 4,
    VT_TIME = 6,
    VT_UNUPDATED_NPC_CARS = 8
  };
  ControlToProxyReplyType reply() const {
    return static_cast<ControlToProxyReplyType>(GetField<int8_t>(VT_REPLY, 0));
  }
  double time() const {
    return GetField<double>(VT_TIME, 0.0);
  }
  int32_t unupdated_npc_cars() const {
    return GetField<int32_t>(VT_UNUPDATED_NPC_CARS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_REPLY) &&
           VerifyField<double>(verifier, VT_TIME) &&
           VerifyField<int32_t>(verifier, VT_UNUPDATED_NPC_CARS) &&
           verifier.EndTable();
  }
};

struct ControlToProxyReplyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_reply(ControlToProxyReplyType reply) {
    fbb_.AddElement<int8_t>(ControlToProxyReply::VT_REPLY, static_cast<int8_t>(reply), 0);
  }
  void add_time(double time) {
    fbb_.AddElement<double>(ControlToProxyReply::VT_TIME, time, 0.0);
  }
  void add_unupdated_npc_cars(int32_t unupdated_npc_cars) {
    fbb_.AddElement<int32_t>(ControlToProxyReply::VT_UNUPDATED_NPC_CARS, unupdated_npc_cars, 0);
  }
  ControlToProxyReplyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ControlToProxyReplyBuilder &operator=(const ControlToProxyReplyBuilder &);
  flatbuffers::Offset<ControlToProxyReply> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ControlToProxyReply>(end);
    return o;
  }
};

inline flatbuffers::Offset<ControlToProxyReply> CreateControlToProxyReply(
    flatbuffers::FlatBufferBuilder &_fbb,
    ControlToProxyReplyType reply = ControlToProxyReplyType_DONE,
    double time = 0.0,
    int32_t unupdated_npc_cars = 0) {
  ControlToProxyReplyBuilder builder_(_fbb);
  builder_.add_time(time);
  builder_.add_unupdated_npc_cars(unupdated_npc_cars);
  builder_.add_reply(reply);
  return builder_.Finish();
}

inline const RHMsg::ControlToProxyReply *GetControlToProxyReply(const void *buf) {
  return flatbuffers::GetRoot<RHMsg::ControlToProxyReply>(buf);
}

inline bool VerifyControlToProxyReplyBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<RHMsg::ControlToProxyReply>(nullptr);
}

inline void FinishControlToProxyReplyBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<RHMsg::ControlToProxyReply> root) {
  fbb.Finish(root);
}

}  // namespace RHMsg

#endif  // FLATBUFFERS_GENERATED_CONTROLTOPROXYREPLY_RHMSG_H_
