// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SIMCONTROLREQUEST_RHMSG_H_
#define FLATBUFFERS_GENERATED_SIMCONTROLREQUEST_RHMSG_H_

#include "flatbuffers/flatbuffers.h"

namespace RHMsg {

struct SimControlRequest;

enum SimControlRequestType {
  SimControlRequestType_ADVANCE = 0,
  SimControlRequestType_MIN = SimControlRequestType_ADVANCE,
  SimControlRequestType_MAX = SimControlRequestType_ADVANCE
};

inline SimControlRequestType (&EnumValuesSimControlRequestType())[1] {
  static SimControlRequestType values[] = {
    SimControlRequestType_ADVANCE
  };
  return values;
}

inline const char **EnumNamesSimControlRequestType() {
  static const char *names[] = {
    "ADVANCE",
    nullptr
  };
  return names;
}

inline const char *EnumNameSimControlRequestType(SimControlRequestType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesSimControlRequestType()[index];
}

struct SimControlRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_REQUEST = 4,
    VT_SIM_TIME = 6
  };
  SimControlRequestType request() const {
    return static_cast<SimControlRequestType>(GetField<int8_t>(VT_REQUEST, 0));
  }
  double sim_time() const {
    return GetField<double>(VT_SIM_TIME, 0.0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_REQUEST) &&
           VerifyField<double>(verifier, VT_SIM_TIME) &&
           verifier.EndTable();
  }
};

struct SimControlRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_request(SimControlRequestType request) {
    fbb_.AddElement<int8_t>(SimControlRequest::VT_REQUEST, static_cast<int8_t>(request), 0);
  }
  void add_sim_time(double sim_time) {
    fbb_.AddElement<double>(SimControlRequest::VT_SIM_TIME, sim_time, 0.0);
  }
  SimControlRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SimControlRequestBuilder &operator=(const SimControlRequestBuilder &);
  flatbuffers::Offset<SimControlRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SimControlRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<SimControlRequest> CreateSimControlRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    SimControlRequestType request = SimControlRequestType_ADVANCE,
    double sim_time = 0.0) {
  SimControlRequestBuilder builder_(_fbb);
  builder_.add_sim_time(sim_time);
  builder_.add_request(request);
  return builder_.Finish();
}

inline const RHMsg::SimControlRequest *GetSimControlRequest(const void *buf) {
  return flatbuffers::GetRoot<RHMsg::SimControlRequest>(buf);
}

inline bool VerifySimControlRequestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<RHMsg::SimControlRequest>(nullptr);
}

inline void FinishSimControlRequestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<RHMsg::SimControlRequest> root) {
  fbb.Finish(root);
}

}  // namespace RHMsg

#endif  // FLATBUFFERS_GENERATED_SIMCONTROLREQUEST_RHMSG_H_
