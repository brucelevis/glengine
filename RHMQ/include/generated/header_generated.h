// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_HEADER_RHMSG_H_
#define FLATBUFFERS_GENERATED_HEADER_RHMSG_H_

#include "flatbuffers/flatbuffers.h"

namespace RHMsg {

struct HeaderData;

struct HeaderRoot;

enum Source {
  Source_COLLISION_REPORT = 0,
  Source_CAMERA_SENSOR = 1,
  Source_DEPTH_SENSOR = 2,
  Source_LASERSCAN_SENSOR = 3,
  Source_POINTCLOUD_SENSOR = 4,
  Source_RADAR_SENSOR = 5,
  Source_SEMANTIC_SENSOR = 6,
  Source_KINEMATIC_ACTUATION = 7,
  Source_KINEMATIC_STATE = 8,
  Source_PEDESTRIAN_ACTUATION = 9,
  Source_PEDESTRIAN_STATE = 10,
  Source_PHYSICS_VEHICLE_ACTUATION = 11,
  Source_PHYSICS_VEHICLE_STATE = 12,
  Source_TRAFFIC_SIGNAL_STATE = 13,
  Source_ADVANCED_VEHICLE_STATE = 14,
  Source_VIRTUAL_SENSOR = 15,
  Source_GROUPED_STATES = 16,
  Source_ULTRASONIC_SENSOR = 17,
  Source_MIN = Source_COLLISION_REPORT,
  Source_MAX = Source_ULTRASONIC_SENSOR
};

inline Source (&EnumValuesSource())[18] {
  static Source values[] = {
    Source_COLLISION_REPORT,
    Source_CAMERA_SENSOR,
    Source_DEPTH_SENSOR,
    Source_LASERSCAN_SENSOR,
    Source_POINTCLOUD_SENSOR,
    Source_RADAR_SENSOR,
    Source_SEMANTIC_SENSOR,
    Source_KINEMATIC_ACTUATION,
    Source_KINEMATIC_STATE,
    Source_PEDESTRIAN_ACTUATION,
    Source_PEDESTRIAN_STATE,
    Source_PHYSICS_VEHICLE_ACTUATION,
    Source_PHYSICS_VEHICLE_STATE,
    Source_TRAFFIC_SIGNAL_STATE,
    Source_ADVANCED_VEHICLE_STATE,
    Source_VIRTUAL_SENSOR,
    Source_GROUPED_STATES,
    Source_ULTRASONIC_SENSOR
  };
  return values;
}

inline const char **EnumNamesSource() {
  static const char *names[] = {
    "COLLISION_REPORT",
    "CAMERA_SENSOR",
    "DEPTH_SENSOR",
    "LASERSCAN_SENSOR",
    "POINTCLOUD_SENSOR",
    "RADAR_SENSOR",
    "SEMANTIC_SENSOR",
    "KINEMATIC_ACTUATION",
    "KINEMATIC_STATE",
    "PEDESTRIAN_ACTUATION",
    "PEDESTRIAN_STATE",
    "PHYSICS_VEHICLE_ACTUATION",
    "PHYSICS_VEHICLE_STATE",
    "TRAFFIC_SIGNAL_STATE",
    "ADVANCED_VEHICLE_STATE",
    "VIRTUAL_SENSOR",
    "GROUPED_STATES",
    "ULTRASONIC_SENSOR",
    nullptr
  };
  return names;
}

inline const char *EnumNameSource(Source e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesSource()[index];
}

struct HeaderData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TIMESTAMP = 4,
    VT_SEQUENCE_NO = 6,
    VT_SOURCE = 8
  };
  double timestamp() const {
    return GetField<double>(VT_TIMESTAMP, 0.0);
  }
  uint32_t sequence_no() const {
    return GetField<uint32_t>(VT_SEQUENCE_NO, 0);
  }
  Source source() const {
    return static_cast<Source>(GetField<int8_t>(VT_SOURCE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_TIMESTAMP) &&
           VerifyField<uint32_t>(verifier, VT_SEQUENCE_NO) &&
           VerifyField<int8_t>(verifier, VT_SOURCE) &&
           verifier.EndTable();
  }
};

struct HeaderDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_timestamp(double timestamp) {
    fbb_.AddElement<double>(HeaderData::VT_TIMESTAMP, timestamp, 0.0);
  }
  void add_sequence_no(uint32_t sequence_no) {
    fbb_.AddElement<uint32_t>(HeaderData::VT_SEQUENCE_NO, sequence_no, 0);
  }
  void add_source(Source source) {
    fbb_.AddElement<int8_t>(HeaderData::VT_SOURCE, static_cast<int8_t>(source), 0);
  }
  HeaderDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HeaderDataBuilder &operator=(const HeaderDataBuilder &);
  flatbuffers::Offset<HeaderData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HeaderData>(end);
    return o;
  }
};

inline flatbuffers::Offset<HeaderData> CreateHeaderData(
    flatbuffers::FlatBufferBuilder &_fbb,
    double timestamp = 0.0,
    uint32_t sequence_no = 0,
    Source source = Source_COLLISION_REPORT) {
  HeaderDataBuilder builder_(_fbb);
  builder_.add_timestamp(timestamp);
  builder_.add_sequence_no(sequence_no);
  builder_.add_source(source);
  return builder_.Finish();
}

struct HeaderRoot FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_HEADER = 4
  };
  const HeaderData *header() const {
    return GetPointer<const HeaderData *>(VT_HEADER);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HEADER) &&
           verifier.VerifyTable(header()) &&
           verifier.EndTable();
  }
};

struct HeaderRootBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_header(flatbuffers::Offset<HeaderData> header) {
    fbb_.AddOffset(HeaderRoot::VT_HEADER, header);
  }
  HeaderRootBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HeaderRootBuilder &operator=(const HeaderRootBuilder &);
  flatbuffers::Offset<HeaderRoot> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HeaderRoot>(end);
    return o;
  }
};

inline flatbuffers::Offset<HeaderRoot> CreateHeaderRoot(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<HeaderData> header = 0) {
  HeaderRootBuilder builder_(_fbb);
  builder_.add_header(header);
  return builder_.Finish();
}

inline const RHMsg::HeaderRoot *GetHeaderRoot(const void *buf) {
  return flatbuffers::GetRoot<RHMsg::HeaderRoot>(buf);
}

inline bool VerifyHeaderRootBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<RHMsg::HeaderRoot>(nullptr);
}

inline void FinishHeaderRootBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<RHMsg::HeaderRoot> root) {
  fbb.Finish(root);
}

}  // namespace RHMsg

#endif  // FLATBUFFERS_GENERATED_HEADER_RHMSG_H_
