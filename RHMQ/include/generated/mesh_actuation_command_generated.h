// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MESHACTUATIONCOMMAND_RHMSG_H_
#define FLATBUFFERS_GENERATED_MESHACTUATIONCOMMAND_RHMSG_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"
#include "header_generated.h"

namespace RHMsg {

struct MeshActuationCommand;

struct MeshActuationCommand FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_HEADER = 4,
    VT_UUID = 6,
    VT_LOCATION = 8,
    VT_ORIENTATION = 10
  };
  const HeaderData *header() const {
    return GetPointer<const HeaderData *>(VT_HEADER);
  }
  const UUID *uuid() const {
    return GetStruct<const UUID *>(VT_UUID);
  }
  const Vec3 *location() const {
    return GetStruct<const Vec3 *>(VT_LOCATION);
  }
  const Quat4 *orientation() const {
    return GetStruct<const Quat4 *>(VT_ORIENTATION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HEADER) &&
           verifier.VerifyTable(header()) &&
           VerifyField<UUID>(verifier, VT_UUID) &&
           VerifyField<Vec3>(verifier, VT_LOCATION) &&
           VerifyField<Quat4>(verifier, VT_ORIENTATION) &&
           verifier.EndTable();
  }
};

struct MeshActuationCommandBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_header(flatbuffers::Offset<HeaderData> header) {
    fbb_.AddOffset(MeshActuationCommand::VT_HEADER, header);
  }
  void add_uuid(const UUID *uuid) {
    fbb_.AddStruct(MeshActuationCommand::VT_UUID, uuid);
  }
  void add_location(const Vec3 *location) {
    fbb_.AddStruct(MeshActuationCommand::VT_LOCATION, location);
  }
  void add_orientation(const Quat4 *orientation) {
    fbb_.AddStruct(MeshActuationCommand::VT_ORIENTATION, orientation);
  }
  MeshActuationCommandBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MeshActuationCommandBuilder &operator=(const MeshActuationCommandBuilder &);
  flatbuffers::Offset<MeshActuationCommand> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MeshActuationCommand>(end);
    return o;
  }
};

inline flatbuffers::Offset<MeshActuationCommand> CreateMeshActuationCommand(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<HeaderData> header = 0,
    const UUID *uuid = 0,
    const Vec3 *location = 0,
    const Quat4 *orientation = 0) {
  MeshActuationCommandBuilder builder_(_fbb);
  builder_.add_orientation(orientation);
  builder_.add_location(location);
  builder_.add_uuid(uuid);
  builder_.add_header(header);
  return builder_.Finish();
}

inline const RHMsg::MeshActuationCommand *GetMeshActuationCommand(const void *buf) {
  return flatbuffers::GetRoot<RHMsg::MeshActuationCommand>(buf);
}

inline bool VerifyMeshActuationCommandBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<RHMsg::MeshActuationCommand>(nullptr);
}

inline void FinishMeshActuationCommandBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<RHMsg::MeshActuationCommand> root) {
  fbb.Finish(root);
}

}  // namespace RHMsg

#endif  // FLATBUFFERS_GENERATED_MESHACTUATIONCOMMAND_RHMSG_H_
