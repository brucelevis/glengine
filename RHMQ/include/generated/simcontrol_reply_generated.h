// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SIMCONTROLREPLY_RHMSG_H_
#define FLATBUFFERS_GENERATED_SIMCONTROLREPLY_RHMSG_H_

#include "flatbuffers/flatbuffers.h"

namespace RHMsg {

struct SimControlReply;

enum SimControlReplyType {
  SimControlReplyType_DONE = 0,
  SimControlReplyType_MIN = SimControlReplyType_DONE,
  SimControlReplyType_MAX = SimControlReplyType_DONE
};

inline SimControlReplyType (&EnumValuesSimControlReplyType())[1] {
  static SimControlReplyType values[] = {
    SimControlReplyType_DONE
  };
  return values;
}

inline const char **EnumNamesSimControlReplyType() {
  static const char *names[] = {
    "DONE",
    nullptr
  };
  return names;
}

inline const char *EnumNameSimControlReplyType(SimControlReplyType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesSimControlReplyType()[index];
}

struct SimControlReply FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_REPLY = 4
  };
  SimControlReplyType reply() const {
    return static_cast<SimControlReplyType>(GetField<int8_t>(VT_REPLY, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_REPLY) &&
           verifier.EndTable();
  }
};

struct SimControlReplyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_reply(SimControlReplyType reply) {
    fbb_.AddElement<int8_t>(SimControlReply::VT_REPLY, static_cast<int8_t>(reply), 0);
  }
  SimControlReplyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SimControlReplyBuilder &operator=(const SimControlReplyBuilder &);
  flatbuffers::Offset<SimControlReply> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SimControlReply>(end);
    return o;
  }
};

inline flatbuffers::Offset<SimControlReply> CreateSimControlReply(
    flatbuffers::FlatBufferBuilder &_fbb,
    SimControlReplyType reply = SimControlReplyType_DONE) {
  SimControlReplyBuilder builder_(_fbb);
  builder_.add_reply(reply);
  return builder_.Finish();
}

inline const RHMsg::SimControlReply *GetSimControlReply(const void *buf) {
  return flatbuffers::GetRoot<RHMsg::SimControlReply>(buf);
}

inline bool VerifySimControlReplyBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<RHMsg::SimControlReply>(nullptr);
}

inline void FinishSimControlReplyBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<RHMsg::SimControlReply> root) {
  fbb.Finish(root);
}

}  // namespace RHMsg

#endif  // FLATBUFFERS_GENERATED_SIMCONTROLREPLY_RHMSG_H_
