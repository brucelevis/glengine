// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GROUPEDSTATEMEASUREMENT_RHMSG_H_
#define FLATBUFFERS_GENERATED_GROUPEDSTATEMEASUREMENT_RHMSG_H_

#include "flatbuffers/flatbuffers.h"

#include "advanced_vehicle_state_measurement_generated.h"
#include "common_generated.h"
#include "header_generated.h"
#include "kinematic_state_measurement_generated.h"
#include "mesh_state_measurement_generated.h"
#include "pedestrian_state_measurement_generated.h"
#include "physics_vehicle_state_measurement_generated.h"

namespace RHMsg {

struct GroupedStateMeasurement;

struct GroupedStateMeasurement FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_HEADER = 4,
    VT_KINEMATIC_STATES = 6,
    VT_PEDESTRIAN_STATES = 8,
    VT_PHYSICS_VEHICLE_STATES = 10,
    VT_ADVANCED_VEHICLE_STATES = 12,
    VT_MESH_STATES = 14
  };
  const HeaderData *header() const {
    return GetPointer<const HeaderData *>(VT_HEADER);
  }
  const flatbuffers::Vector<flatbuffers::Offset<KinematicStateMeasurement>> *kinematic_states() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<KinematicStateMeasurement>> *>(VT_KINEMATIC_STATES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<PedestrianStateMeasurement>> *pedestrian_states() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<PedestrianStateMeasurement>> *>(VT_PEDESTRIAN_STATES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<PhysicsVehicleStateMeasurement>> *physics_vehicle_states() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<PhysicsVehicleStateMeasurement>> *>(VT_PHYSICS_VEHICLE_STATES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<AdvancedVehicleStateMeasurement>> *advanced_vehicle_states() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<AdvancedVehicleStateMeasurement>> *>(VT_ADVANCED_VEHICLE_STATES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<MeshStateMeasurement>> *mesh_states() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<MeshStateMeasurement>> *>(VT_MESH_STATES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HEADER) &&
           verifier.VerifyTable(header()) &&
           VerifyOffset(verifier, VT_KINEMATIC_STATES) &&
           verifier.Verify(kinematic_states()) &&
           verifier.VerifyVectorOfTables(kinematic_states()) &&
           VerifyOffset(verifier, VT_PEDESTRIAN_STATES) &&
           verifier.Verify(pedestrian_states()) &&
           verifier.VerifyVectorOfTables(pedestrian_states()) &&
           VerifyOffset(verifier, VT_PHYSICS_VEHICLE_STATES) &&
           verifier.Verify(physics_vehicle_states()) &&
           verifier.VerifyVectorOfTables(physics_vehicle_states()) &&
           VerifyOffset(verifier, VT_ADVANCED_VEHICLE_STATES) &&
           verifier.Verify(advanced_vehicle_states()) &&
           verifier.VerifyVectorOfTables(advanced_vehicle_states()) &&
           VerifyOffset(verifier, VT_MESH_STATES) &&
           verifier.Verify(mesh_states()) &&
           verifier.VerifyVectorOfTables(mesh_states()) &&
           verifier.EndTable();
  }
};

struct GroupedStateMeasurementBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_header(flatbuffers::Offset<HeaderData> header) {
    fbb_.AddOffset(GroupedStateMeasurement::VT_HEADER, header);
  }
  void add_kinematic_states(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<KinematicStateMeasurement>>> kinematic_states) {
    fbb_.AddOffset(GroupedStateMeasurement::VT_KINEMATIC_STATES, kinematic_states);
  }
  void add_pedestrian_states(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<PedestrianStateMeasurement>>> pedestrian_states) {
    fbb_.AddOffset(GroupedStateMeasurement::VT_PEDESTRIAN_STATES, pedestrian_states);
  }
  void add_physics_vehicle_states(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<PhysicsVehicleStateMeasurement>>> physics_vehicle_states) {
    fbb_.AddOffset(GroupedStateMeasurement::VT_PHYSICS_VEHICLE_STATES, physics_vehicle_states);
  }
  void add_advanced_vehicle_states(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<AdvancedVehicleStateMeasurement>>> advanced_vehicle_states) {
    fbb_.AddOffset(GroupedStateMeasurement::VT_ADVANCED_VEHICLE_STATES, advanced_vehicle_states);
  }
  void add_mesh_states(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MeshStateMeasurement>>> mesh_states) {
    fbb_.AddOffset(GroupedStateMeasurement::VT_MESH_STATES, mesh_states);
  }
  GroupedStateMeasurementBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GroupedStateMeasurementBuilder &operator=(const GroupedStateMeasurementBuilder &);
  flatbuffers::Offset<GroupedStateMeasurement> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GroupedStateMeasurement>(end);
    return o;
  }
};

inline flatbuffers::Offset<GroupedStateMeasurement> CreateGroupedStateMeasurement(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<HeaderData> header = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<KinematicStateMeasurement>>> kinematic_states = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<PedestrianStateMeasurement>>> pedestrian_states = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<PhysicsVehicleStateMeasurement>>> physics_vehicle_states = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<AdvancedVehicleStateMeasurement>>> advanced_vehicle_states = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MeshStateMeasurement>>> mesh_states = 0) {
  GroupedStateMeasurementBuilder builder_(_fbb);
  builder_.add_mesh_states(mesh_states);
  builder_.add_advanced_vehicle_states(advanced_vehicle_states);
  builder_.add_physics_vehicle_states(physics_vehicle_states);
  builder_.add_pedestrian_states(pedestrian_states);
  builder_.add_kinematic_states(kinematic_states);
  builder_.add_header(header);
  return builder_.Finish();
}

inline flatbuffers::Offset<GroupedStateMeasurement> CreateGroupedStateMeasurementDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<HeaderData> header = 0,
    const std::vector<flatbuffers::Offset<KinematicStateMeasurement>> *kinematic_states = nullptr,
    const std::vector<flatbuffers::Offset<PedestrianStateMeasurement>> *pedestrian_states = nullptr,
    const std::vector<flatbuffers::Offset<PhysicsVehicleStateMeasurement>> *physics_vehicle_states = nullptr,
    const std::vector<flatbuffers::Offset<AdvancedVehicleStateMeasurement>> *advanced_vehicle_states = nullptr,
    const std::vector<flatbuffers::Offset<MeshStateMeasurement>> *mesh_states = nullptr) {
  return RHMsg::CreateGroupedStateMeasurement(
      _fbb,
      header,
      kinematic_states ? _fbb.CreateVector<flatbuffers::Offset<KinematicStateMeasurement>>(*kinematic_states) : 0,
      pedestrian_states ? _fbb.CreateVector<flatbuffers::Offset<PedestrianStateMeasurement>>(*pedestrian_states) : 0,
      physics_vehicle_states ? _fbb.CreateVector<flatbuffers::Offset<PhysicsVehicleStateMeasurement>>(*physics_vehicle_states) : 0,
      advanced_vehicle_states ? _fbb.CreateVector<flatbuffers::Offset<AdvancedVehicleStateMeasurement>>(*advanced_vehicle_states) : 0,
      mesh_states ? _fbb.CreateVector<flatbuffers::Offset<MeshStateMeasurement>>(*mesh_states) : 0);
}

inline const RHMsg::GroupedStateMeasurement *GetGroupedStateMeasurement(const void *buf) {
  return flatbuffers::GetRoot<RHMsg::GroupedStateMeasurement>(buf);
}

inline bool VerifyGroupedStateMeasurementBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<RHMsg::GroupedStateMeasurement>(nullptr);
}

inline void FinishGroupedStateMeasurementBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<RHMsg::GroupedStateMeasurement> root) {
  fbb.Finish(root);
}

}  // namespace RHMsg

#endif  // FLATBUFFERS_GENERATED_GROUPEDSTATEMEASUREMENT_RHMSG_H_
